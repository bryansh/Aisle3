name: Release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-22.04, windows-latest]
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libjavascriptcoregtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - uses: tauri-apps/tauri-action@v0.5.14
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'Aisle3 v__VERSION__'
          releaseBody: 'See the assets to download and install this version.'
          releaseDraft: false
          prerelease: false
          includeUpdaterJson: true

  publish-updates:
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4

      - name: Set up variables
        id: vars
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Wait for release to be complete
        run: |
          echo "Waiting for release assets to be available..."
          sleep 60

      - name: Download release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p release-assets
          
          # Download the key files for updates
          gh release download ${{ steps.vars.outputs.tag_name }} \
            --pattern "*.tar.gz" \
            --pattern "*_en-US.msi" \
            --pattern "*amd64.AppImage" \
            --pattern "latest.json" \
            --dir release-assets

      - name: Process latest.json
        run: |
          # Update URLs in latest.json to point to update server
          sed -i 's|https://github.com/bryansh/Aisle3/releases/download|https://github.com/bryansh/aisle3-updates/releases/download|g' release-assets/latest.json
          
          # Verify the changes
          echo "Updated latest.json:"
          cat release-assets/latest.json

      - name: Checkout update server repository
        uses: actions/checkout@v4
        with:
          repository: bryansh/aisle3-updates
          token: ${{ secrets.UPDATE_REPO_TOKEN }}
          path: update-server

      - name: Create release in update server
        env:
          GITHUB_TOKEN: ${{ secrets.UPDATE_REPO_TOKEN }}
        run: |
          cd update-server
          
          # Create release in update server repo
          gh release create ${{ steps.vars.outputs.tag_name }} \
            --title "Aisle3 v${{ steps.vars.outputs.version }}" \
            --notes "Auto-published from main repository" \
            ../release-assets/*.tar.gz \
            ../release-assets/*_en-US.msi \
            ../release-assets/*amd64.AppImage

      - name: Update latest.json in update server
        env:
          GITHUB_TOKEN: ${{ secrets.UPDATE_REPO_TOKEN }}
        run: |
          cd update-server
          
          # Copy the updated latest.json
          cp ../release-assets/latest.json .
          
          # Commit and push
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add latest.json
          git commit -m "Auto-update to v${{ steps.vars.outputs.version }}"
          git push

      - name: Deployment summary
        run: |
          echo "ðŸŽ‰ Release pipeline completed successfully!"
          echo "âœ… Main repository: Released v${{ steps.vars.outputs.version }}"
          echo "âœ… Update server: Assets uploaded and latest.json updated"
          echo "âœ… Users will now receive automatic updates"